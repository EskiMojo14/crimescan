@use "@material/button/index.scss" as button;
@use "@material/card/index.scss" as card;
@use "@material/chips/index.scss" as chips;
@use "@material/checkbox/index.scss" as checkbox;
@use "@material/drawer/index.scss" as drawer;
@use "@material/icon-button/index.scss" as icon-button;
@use "@material/linear-progress/index.scss" as linear-progress;
@use "@material/ripple/index.scss" as ripple;
@use "@material/snackbar/index.scss" as snackbar;
@use "@material/top-app-bar/index.scss" as top-app-bar;
@use "@material/textfield/mixins" as text-field;
@use "@material/textfield/helper-text/index.scss" as text-field-helper-text;
@use "@material/textfield/icon/index.scss" as text-field-icon;

@use "@material/feature-targeting";
@use "@material/theme/color-palette" as palette;
@use "@material/theme/functions" as theme-functions;

// 1 - card, switch
// 2 - contained button
// 3 - refresh indicator
// 4 - app bar
// 6 - FAB, snackbar
// 8 - menu, side sheet
// 16 - nav drawer, modal side sheet
// 24 - dialog
$overlay-values: (
  0: 0%,
  1: 5%,
  2: 7%,
  3: 8%,
  4: 9%,
  6: 11%,
  8: 12%,
  12: 14%,
  16: 15%,
  24: 16%,
);

@function overlay-elevation($color, $elevation: 0) {
  @return lighten($color, map-get($overlay-values, $elevation));
}

$graph-colors: (
  palette.$red-500,
  palette.$deep-orange-500,
  palette.$orange-500,
  palette.$amber-500,
  palette.$yellow-500,
  palette.$lime-500,
  palette.$light-green-500,
  palette.$green-500,
  palette.$teal-500,
  palette.$cyan-500,
  palette.$light-blue-500,
  palette.$blue-500,
  palette.$indigo-500,
  palette.$deep-purple-500,
  palette.$purple-500,
  palette.$pink-500,
  palette.$blue-grey-500,
  palette.$grey-500,
  palette.$brown-500,
  palette.$red-300,
  palette.$deep-orange-300,
  palette.$orange-300,
  palette.$amber-300,
  palette.$yellow-300,
  palette.$lime-300,
  palette.$light-green-300,
  palette.$green-300,
  palette.$teal-300,
  palette.$cyan-300,
  palette.$light-blue-300,
  palette.$blue-300,
  palette.$indigo-300,
  palette.$deep-purple-300,
  palette.$purple-300,
  palette.$pink-300,
  palette.$blue-grey-300,
  palette.$grey-300,
  palette.$brown-300
);

$graph-colors-dark: (
  palette.$red-300,
  palette.$deep-orange-300,
  palette.$orange-300,
  palette.$amber-300,
  palette.$yellow-300,
  palette.$lime-300,
  palette.$light-green-300,
  palette.$green-300,
  palette.$teal-300,
  palette.$cyan-300,
  palette.$light-blue-300,
  palette.$blue-300,
  palette.$indigo-300,
  palette.$deep-purple-300,
  palette.$purple-300,
  palette.$pink-300,
  palette.$blue-grey-300,
  palette.$grey-300,
  palette.$brown-300,
  palette.$red-200,
  palette.$deep-orange-200,
  palette.$orange-200,
  palette.$amber-200,
  palette.$yellow-200,
  palette.$lime-200,
  palette.$light-green-200,
  palette.$green-200,
  palette.$teal-200,
  palette.$cyan-200,
  palette.$light-blue-200,
  palette.$blue-200,
  palette.$indigo-200,
  palette.$deep-purple-200,
  palette.$purple-200,
  palette.$pink-200,
  palette.$blue-grey-200,
  palette.$grey-200,
  palette.$brown-200
);

$letters: (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z);

@mixin theme($theme, $dark: false) {
  $text-colors: (
    text-high: rgba(map-get($theme, on-surface), 0.87),
    text-medium: rgba(map-get($theme, on-surface), 0.6),
    text-disabled: rgba(map-get($theme, on-surface), 0.38),
  );
  $variables: map-merge($theme, $text-colors);
  --meta-color: #{if(
      $dark,
      darken(overlay-elevation(map-get($variables, surface), 4), 10%),
      darken(map-get($variables, primary), 10%)
    )};
  --divider-color: #{rgba(map-get($variables, on-surface), 0.12)};
  --lighter-color: #{rgba(map-get($variables, on-surface), 0.06)};
  body {
    background-color: map-get($variables, background);
    color: map-get($variables, on-surface);
  }
  a {
    color: map-get($variables, primary);
  }
  ::selection {
    background: rgba(map-get($variables, primary), 0.45);
    color: inherit;
  }

  .mdc-button {
    @include button.ink-color(map-get($variables, primary));
    @include ripple.states(map-get($variables, primary), false, feature-targeting.all(), ".mdc-button__ripple");
    &:disabled {
      color: map-get($variables, text-disabled);
    }
    &.mdc-button--raised,
    &.mdc-button--unelevated {
      @include button.container-fill-color(map-get($variables, primary));
      @include button.ink-color(map-get($variables, on-primary));
      @include ripple.states(map-get($variables, on-primary), false, feature-targeting.all(), ".mdc-button__ripple");
    }
    &.secondary {
      @include button.ink-color(map-get($variables, secondary));
      @include ripple.states(map-get($variables, secondary), false, feature-targeting.all(), ".mdc-button__ripple");
      &.mdc-button--raised,
      &.mdc-button--unelevated {
        @include button.container-fill-color(map-get($variables, secondary));
        @include button.ink-color(map-get($variables, on-secondary));
        @include ripple.states(
          map-get($variables, on-secondary),
          false,
          feature-targeting.all(),
          ".mdc-button__ripple"
        );
      }
    }
    &.delete {
      @include button.ink-color(map-get($variables, error));
      @include ripple.states(map-get($variables, error), false, feature-targeting.all(), ".mdc-button__ripple");
    }
  }

  .mdc-card {
    background-color: if($dark, overlay-elevation(map-get($variables, surface), 1), map-get($variables, surface));
    &__primary-action {
      @include ripple.states(map-get($variables, on-surface));
      @include ripple.states-selected(map-get($variables, primary));
      @include ripple.states-activated(map-get($variables, primary));
    }
    &__action--icon {
      &:not(:disabled) {
        color: map-get($variables, text-medium);
      }
      &:disabled {
        color: map-get($variables, text-disabled);
      }
    }
  }

  .mdc-checkbox {
    @include checkbox.container-colors(
      map-get($variables, text-medium),
      transparent,
      map-get($variables, secondary),
      map-get($variables, secondary)
    );
    @include checkbox.disabled-container-colors(
      rgba(map-get($variables, on-surface), 0.26),
      transparent,
      transparent,
      rgba(map-get($variables, on-surface), 0.26)
    );
    @include checkbox.ink-color(map-get($variables, on-secondary));
    @include checkbox.disabled-ink-color(map-get($variables, on-surface));
    @include ripple.states(map-get($variables, on-surface), false, feature-targeting.all(), ".mdc-checkbox__ripple");
    &.mdc-checkbox--selected {
      @include ripple.states(map-get($variables, secondary), false, feature-targeting.all(), ".mdc-checkbox__ripple");
    }
  }

  .mdc-chip {
    @include chips.fill-color-accessible(mix(map-get($variables, on-surface), map-get($variables, surface), 12%));
  }

  .mdc-data-table {
    color: map-get($variables, text-high);
    &__cell {
      color: map-get($variables, text-high);
    }
    &__header-cell {
      color: map-get($variables, text-high);
    }
    &__row:hover:not(.mdc-data-table__row--selected):not(.mdc-data-table__row--activated) {
      background-color: rgba(map-get($variables, on-surface), 0.04);
    }
  }

  .mdc-drawer {
    @include drawer.fill-color-accessible(
      if($dark, overlay-elevation(map-get($variables, surface), 16), map-get($variables, surface))
    );
    @include drawer.item-activated-icon-ink-color(map-get($variables, primary));
    @include drawer.item-activated-text-ink-color(map-get($variables, primary));
    @include drawer.scrim-fill-color(rgba(map-get($variables, on-surface), 0.32));
    --mdc-slider-bg-color-behind-component: #{if(
        $dark,
        overlay-elevation(map-get($variables, surface), 16),
        map-get($variables, surface)
      )};
    &.mdc-drawer--dismissible {
      @include drawer.surface-fill-color(
        if($dark, overlay-elevation(map-get($variables, surface), 1), map-get($variables, surface))
      );
      --mdc-slider-bg-color-behind-component: #{if(
          $dark,
          overlay-elevation(map-get($variables, surface), 1),
          map-get($variables, surface)
        )};

      .mdc-chip {
        @include chips.fill-color-accessible(
          mix(
            map-get($variables, on-surface),
            if($dark, overlay-elevation(map-get($variables, surface), 1), map-get($variables, surface)),
            12%
          )
        );
        @include chips.selected-ink-color(map-get($variables, primary));
      }
    }
    &.drawer-settings {
      .subheader,
      .disclaimer-container {
        color: map-get($variables, text-medium);
      }
      .map-icon {
        color: map-get($variables, text-disabled);
      }
      .mdc-chip {
        &.query-chip {
          .mdc-chip__icon {
            color: map-get($variables, primary);
          }
        }
        &.result-chip {
          .mdc-chip__icon {
            color: map-get($variables, secondary);
          }
        }
      }
    }
    &.drawer-search {
      .subheader {
        color: map-get($variables, text-medium);
      }
      .no-result-display {
        .title {
          color: map-get($variables, text-high);
        }
        .subtitle {
          color: map-get($variables, text-medium);
        }
      }
    }

    .mdc-chip {
      @include chips.fill-color-accessible(
        mix(
          map-get($variables, on-surface),
          if($dark, overlay-elevation(map-get($variables, surface), 16), map-get($variables, surface)),
          12%
        )
      );
      @include chips.selected-ink-color(map-get($variables, primary));
      &[disabled] {
        @include chips.ink-color(map-get($variables, text-disabled));
      }
    }
  }

  .mdc-icon-button {
    @include icon-button.ink-color(map-get($variables, text-medium));
    @include icon-button.disabled-ink-color(map-get($variables, text-disabled));
    &--on.favorite {
      @include icon-button.ink-color(map-get($variables, secondary));
    }
  }

  .mdc-linear-progress {
    @include linear-progress.bar-color(map-get($variables, primary));
    @include linear-progress.buffer-color(
      mix(
        map-get($variables, on-surface),
        if($dark, overlay-elevation(map-get($variables, surface), 1), map-get($variables, surface)),
        10%
      )
    );
  }

  .mdc-snackbar {
    @include snackbar.fill-color(mix(map-get($variables, on-surface), map-get($variables, surface), 80%));
    @include snackbar.label-ink-color(map-get($variables, surface));
    &__action:not(:disabled) {
      color: if($dark, darken(map-get($variables, primary), 25%), map-get($variables, primary));
      @include ripple.states(if($dark, darken(map-get($variables, primary), 25%), map-get($variables, primary)));
    }
  }

  .mdc-text-field {
    input:-webkit-autofill,
    input:-webkit-autofill:hover,
    input:-webkit-autofill:focus,
    input:-webkit-autofill:active {
      -webkit-background-clip: text;
      -webkit-text-fill-color: map-get($variables, on-surface);
    }
    &:not(.mdc-text-field--focused) {
      @include text-field-icon.leading-icon-color(map-get($variables, text-medium));
      @include text-field-icon.trailing-icon-color(map-get($variables, text-medium));
      @include text-field.ink-color(map-get($variables, text-high));
      @include text-field.label-color(map-get($variables, text-medium));
      @include text-field.caret-color(map-get($variables, text-high));
      @include text-field.outline-color(map-get($variables, text-disabled));
      @include text-field.hover-outline-color(map-get($variables, text-medium));
      @include text-field-helper-text.helper-text-color(map-get($variables, text-medium));
      &.mdc-text-field--invalid {
        @include text-field-icon.leading-icon-color(map-get($variables, text-medium));
        @include text-field-icon.trailing-icon-color(map-get($variables, text-medium));
        @include text-field.ink-color(map-get($variables, text-high));
        @include text-field.label-color(map-get($variables, error));
        @include text-field.caret-color(map-get($variables, error));
        @include text-field.outline-color(map-get($variables, error));
        @include text-field.hover-outline-color(
          if($dark, lighten(map-get($variables, error), 12%), darken(map-get($variables, error), 25%))
        );
        @include text-field-helper-text.helper-text-color(map-get($variables, error));
      }
    }
    &.mdc-text-field--focused {
      @include text-field-icon.leading-icon-color(map-get($variables, text-medium));
      @include text-field-icon.trailing-icon-color(map-get($variables, text-medium));
      @include text-field.ink-color(map-get($variables, text-high));
      @include text-field.label-color(map-get($variables, primary));
      @include text-field.caret-color(map-get($variables, primary));
      @include text-field.outline-color(map-get($variables, primary));
      @include text-field-helper-text.helper-text-color(map-get($variables, text-medium));
      .mdc-text-field__input:required ~ .mdc-notched-outline .mdc-floating-label::after {
        color: map-get($variables, primary);
      }
    }
    &.mdc-text-field--disabled {
      .mdc-text-field__input,
      .mdc-floating-label {
        color: map-get($variables, text-disabled);
      }
      .mdc-notched-outline__leading,
      .mdc-notched-outline__notch,
      .mdc-notched-outline__trailing {
        border-color: rgba(map-get($variables, on-surface), 0.06);
      }
    }
  }

  .mdc-top-app-bar {
    @include top-app-bar.fill-color(
      if($dark, overlay-elevation(map-get($variables, surface), 4), map-get($variables, primary))
    );
    @include top-app-bar.ink-color(if($dark, map-get($variables, text-high), map-get($variables, on-primary)));
    @include top-app-bar.icon-ink-color(if($dark, map-get($variables, text-high), map-get($variables, on-primary)));
    .mdc-chip {
      @include chips.fill-color-accessible(
        mix(
          map-get($variables, on-surface),
          if($dark, overlay-elevation(map-get($variables, surface), 4), map-get($variables, primary)),
          12%
        )
      );
    }
  }

  .segmented-button {
    &.segmented-button--toggle .segmented-button__segment {
      @include button.ink-color(map-get($variables, text-medium));
      @include ripple.states(map-get($variables, on-surface), false, feature-targeting.all(), ".mdc-button__ripple");
      @include ripple.states-selected(
        map-get($variables, primary),
        false,
        feature-targeting.all(),
        ".mdc-button__ripple"
      );
      @include ripple.states-selected(
        map-get($variables, text-disabled),
        false,
        feature-targeting.all(),
        "&:disabled .mdc-button__ripple"
      );
      &--selected {
        @include button.ink-color(map-get($variables, primary));
        @include button.outline-color(map-get($variables, primary));
      }
      &:disabled,
      &--selected:disabled {
        @include button.ink-color(map-get($variables, text-disabled));
        @include button.outline-color(map-get($variables, text-disabled));
      }
    }
  }

  .empty-container {
    background-color: map-get($variables, background);
    .title {
      color: map-get($variables, text-high);
    }
    .subtitle {
      color: map-get($variables, text-medium);
    }
  }

  .ct-chart {
    .ct-axis-title {
      fill: map-get($variables, text-high);
    }
    .ct-label {
      color: map-get($variables, text-medium);
    }
    .ct-chart-pie {
      .ct-label {
        fill: if($dark, overlay-elevation(map-get($variables, surface), 1), map-get($variables, surface));
      }
    }
    &.themed {
      .ct-series-a {
        .ct-point,
        .ct-line,
        .ct-bar,
        .ct-slice-donut {
          stroke: map-get($variables, secondary);
        }
        .ct-slice-pie,
        .ct-donut-solid,
        .ct-area,
        .ct-stroked-point {
          fill: map-get($variables, secondary);
        }
      }
      .ct-series-b {
        .ct-point,
        .ct-line,
        .ct-bar,
        .ct-slice-donut {
          stroke: map-get($variables, primary);
        }
        .ct-slice-pie,
        .ct-donut-solid,
        .ct-area,
        .ct-stroked-point {
          fill: map-get($variables, primary);
        }
      }
    }
  }

  @each $letter in $letters {
    $color: if($dark, nth($graph-colors-dark, index($letters, $letter)), nth($graph-colors, index($letters, $letter)));
    .series-#{$letter} {
      .mdc-data-table__cell {
        &.indicator::before {
          background-color: $color;
        }

        .mdc-checkbox {
          @include checkbox.container-colors(map-get($variables, text-medium), transparent, $color, $color);
          @include checkbox.disabled-container-colors(
            rgba(map-get($variables, on-surface), 0.26),
            transparent,
            transparent,
            rgba(map-get($variables, on-surface), 0.26)
          );
          $check-color: if(theme-functions.contrast-tone($color) == "dark", black, white);
          @include checkbox.ink-color($check-color);
          @include checkbox.disabled-ink-color($check-color);
          @include ripple.states(
            map-get($variables, on-surface),
            false,
            feature-targeting.all(),
            ".mdc-checkbox__ripple"
          );
          &.mdc-checkbox--selected {
            @include ripple.states($color, false, feature-targeting.all(), ".mdc-checkbox__ripple");
          }
        }
      }
    }

    .focused:not(.focused-#{$letter}) .series-#{$letter} {
      .mdc-data-table__cell {
        color: map-get($variables, disabled);
        &.indicator::before {
          background-color: rgba($color, 0.05);
        }
      }
    }

    .ct-series-#{$letter} {
      .ct-point,
      .ct-line,
      .ct-bar,
      .ct-slice-donut {
        stroke: $color;
      }
      .ct-slice-pie,
      .ct-donut-solid,
      .ct-area,
      .ct-stroked-point {
        fill: $color;
      }
    }

    .focused:not(.focused-#{$letter}) .ct-series-#{$letter} {
      .ct-point,
      .ct-line,
      .ct-bar,
      .ct-slice-donut {
        stroke: rgba($color, 0.05);
      }
      .ct-slice-pie,
      .ct-donut-solid,
      .ct-area,
      .ct-stroked-point {
        fill: rgba($color, 0.05);
      }
    }
  }
}
